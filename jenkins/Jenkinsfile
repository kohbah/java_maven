pipeline {
    agent any
    tools {
        maven 'maven'
        jdk 'java'
    }

    stages {

        stage('SCM') {
            steps {
                git url: 'https://github.com/kohbah/java_maven.git'
            }
        }

        stage('build && SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    // Optionally use a Maven environment you've configured already
                    withMaven(maven:'maven') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage ('Artifactory configuration') {
            steps {
                rtServer (
                    id: "jfrog",
                    url: 'http://10.0.1.113:8081/artifactory',
                    username: 'admin',
                    password: 'password'
                )

                rtMavenDeployer (
                    id: "maven_deployer",
                    serverId: "jfrog",
                    releaseRepo: "libs-release-local",
                    snapshotRepo: "libs-snapshot-local"
                )

                rtMavenResolver (
                    id: "maven_resolver",
                    serverId: "jfrog",
                    releaseRepo: "libs-release",
                    snapshotRepo: "libs-snapshot"
                )
            }
        }

        stage ('Exec Maven') {
            steps {
                rtMavenRun (
                    pom: 'pom.xml',
                    goals: 'clean install',
                    deployerId: "maven_deployer",
                    resolverId: "maven_resolver",
                    buildName: 'maven_app',
                    buildNumber: '0.0.1'
              )
            }
        }
        stage ("publish to artifactory") {
            steps {
                timeout(time: 2, unit: "MINUTES") {
                    input message: 'do you want to publish this build to artifactory server?', ok: 'Yes'
             }
            }
        }
        stage ('Publish build info') {
            steps {
                rtPublishBuildInfo (
                    serverId: "jfrog",
                    buildName: 'maven_app',
                    buildNumber: '0.0.1'
                )
            }
        }
    }
}